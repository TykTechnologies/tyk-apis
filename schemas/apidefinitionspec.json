{
  "id": "http://jsonschema.net",
  "$schema": "http://json-schema.org/draft-04/schema",
  "description": "APIDefinition represents the configuration for a single proxied API and it's versions.",
  "type": "object",
  "required": [
    "name",
    "proxy",
    "protocol"
  ],
  "properties": {
    "CORS": {
      "description": "CORS cors settings",
      "type": "object",
      "properties": {
        "allow_credentials": {
          "description": "AllowCredentials if true will allow cookies",
          "type": "boolean"
        },
        "allowed_headers": {
          "description": "AllowedHeaders are headers that are allowed within a request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowed_methods": {
          "description": "AllowedMethods is a list of methods to allow access via.",
          "type": "array",
          "items": {
            "description": "Method represents HTTP request method",
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE",
              "OPTIONS",
              "HEAD",
              "CONNECT",
              "TRACE"
            ]
          }
        },
        "allowed_origins": {
          "description": "AllowedOrigins is a list of origin domains to allow access from.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "debug": {
          "description": "Debug if true, this option produces log files for the CORS middleware",
          "type": "boolean"
        },
        "enable": {
          "description": "Enable when set to true it enables the cors middleware for the api",
          "type": "boolean"
        },
        "exposed_headers": {
          "description": "ExposedHeaders is a list of headers that are exposed back in the response.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "max_age": {
          "description": "MaxAge is the maximum age of credentials",
          "type": "integer"
        },
        "options_passthrough": {
          "description": "OptionsPassthrough allow CORS OPTIONS preflight request to be proxied directly to upstream, without authentication and rest of checks. This means that pre-flight requests generated by web-clients such as SwaggerUI or the Tyk Portal documentation system will be able to test the API using trial keys. If your service handles CORS natively, then enable this option.",
          "type": "boolean"
        }
      }
    },
    "active": {
      "description": "Active specifies if the api is enabled or not",
      "type": "boolean"
    },
    "allowed_ips": {
      "description": "AllowedIPs is a list of IP address that are whitelisted.When this is provided all IP address that is not on this list will be blocked and a 403 http status will be returned. The IP address can be IPv4 or IPv6.IP in CIDR notation is also supported.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "api_id": {
      "description": "Only set this field if you are referring To an existing API in def. The Operator will use this API ID to link the CRD with the API in Tyk Note the values in the CRD will become the new source of truth, overriding the existing API Definition",
      "type": "string"
    },
    "auth": {
      "type": "object",
      "required": [
        "auth_header_name"
      ],
      "properties": {
        "auth_header_name": {
          "type": "string"
        },
        "cookie_name": {
          "type": "string"
        },
        "param_name": {
          "type": "string"
        },
        "signature": {
          "type": "object",
          "required": [
            "algorithm",
            "allowed_clock_skew",
            "error_code",
            "error_message",
            "header",
            "secret"
          ],
          "properties": {
            "algorithm": {
              "type": "string"
            },
            "allowed_clock_skew": {
              "type": "integer",
              "format": "int64"
            },
            "error_code": {
              "type": "integer"
            },
            "error_message": {
              "type": "string"
            },
            "header": {
              "type": "string"
            },
            "secret": {
              "type": "string"
            }
          }
        },
        "use_certificate": {
          "type": "boolean"
        },
        "use_cookie": {
          "type": "boolean"
        },
        "use_param": {
          "type": "boolean"
        },
        "validate_signature": {
          "type": "boolean"
        }
      }
    },
    "auth_configs": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "required": [
          "auth_header_name"
        ],
        "properties": {
          "auth_header_name": {
            "type": "string"
          },
          "cookie_name": {
            "type": "string"
          },
          "param_name": {
            "type": "string"
          },
          "signature": {
            "type": "object",
            "required": [
              "algorithm",
              "allowed_clock_skew",
              "error_code",
              "error_message",
              "header",
              "secret"
            ],
            "properties": {
              "algorithm": {
                "type": "string"
              },
              "allowed_clock_skew": {
                "type": "integer",
                "format": "int64"
              },
              "error_code": {
                "type": "integer"
              },
              "error_message": {
                "type": "string"
              },
              "header": {
                "type": "string"
              },
              "secret": {
                "type": "string"
              }
            }
          },
          "use_certificate": {
            "type": "boolean"
          },
          "use_cookie": {
            "type": "boolean"
          },
          "use_param": {
            "type": "boolean"
          },
          "validate_signature": {
            "type": "boolean"
          }
        }
      }
    },
    "blacklisted_ips": {
      "description": "BlacklistedIPs is a list of IP address that will be blacklisted.This means if origin IP matches any IP in this list a 403 http status code will be returned. The IP address can be IPv4 or IPv6. IP in CIDR notation is also supported.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "cache_options": {
      "type": "object",
      "required": [
        "cache_timeout"
      ],
      "properties": {
        "cache_all_safe_requests": {
          "description": "CacheAllSafeRequests caches responses to (GET, HEAD, OPTIONS) requests overrides per-path cache settings in versions, applies across versions",
          "type": "boolean"
        },
        "cache_by_headers": {
          "description": "CacheByHeaders allows header values to be used as part of the cache key",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cache_control_ttl_header": {
          "description": "CacheControlTTLHeader is the response header which tells Tyk how long it is safe to cache the response for",
          "type": "string"
        },
        "cache_response_codes": {
          "description": "CacheOnlyResponseCodes is an array of response codes which are safe to cache. e.g. 404",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "cache_timeout": {
          "description": "CacheTimeout is the TTL for a cached object in seconds",
          "type": "integer",
          "format": "int64"
        },
        "enable_cache": {
          "description": "EnableCache turns global cache middleware on or off. It is still possible to enable caching on a per-path basis by explicitly setting the endpoint cache middleware. see `spec.version_data.versions.{VERSION}.extended_paths.cache[]`",
          "type": "boolean"
        },
        "enable_upstream_cache_control": {
          "description": "EnableUpstreamCacheControl instructs Tyk Cache to respect upstream cache control headers",
          "type": "boolean"
        }
      }
    },
    "certificate_secret_names": {
      "description": "CertificateSecretNames represents the names of the secrets that the controller should look for in the in the current namespace which contain the certificates.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "certificates": {
      "description": "Certificates is a list of Tyk Certificate IDs. e.g. orgid+fingerprint. Use CertificateSecretNames if using cert-manager",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "custom_middleware": {
      "type": "object",
      "required": [
        "driver"
      ],
      "properties": {
        "auth_check": {
          "type": "object",
          "required": [
            "name",
            "path"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "raw_body_only": {
              "type": "boolean"
            },
            "require_session": {
              "type": "boolean"
            }
          }
        },
        "driver": {
          "type": "string"
        },
        "id_extractor": {
          "type": "object",
          "required": [
            "extract_from",
            "extract_with",
            "extractor_config"
          ],
          "properties": {
            "extract_from": {
              "type": "string"
            },
            "extract_with": {
              "type": "string"
            },
            "extractor_config": {
              "type": "object",
              "properties": {
                "header_name": {
                  "type": "string"
                },
                "param_name": {
                  "type": "string"
                },
                "regex_expression": {
                  "type": "string"
                },
                "regex_match_index": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "post": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "path"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "raw_body_only": {
                "type": "boolean"
              },
              "require_session": {
                "type": "boolean"
              }
            }
          }
        },
        "post_key_auth": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "path"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "raw_body_only": {
                "type": "boolean"
              },
              "require_session": {
                "type": "boolean"
              }
            }
          }
        },
        "pre": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "path"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "raw_body_only": {
                "type": "boolean"
              },
              "require_session": {
                "type": "boolean"
              }
            }
          }
        },
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "path"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "raw_body_only": {
                "type": "boolean"
              },
              "require_session": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "definition": {
      "type": "object",
      "required": [
        "key",
        "location",
        "strip_path"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "strip_path": {
          "type": "boolean"
        }
      }
    },
    "do_not_track": {
      "description": "DoNotTrack disables endpoint tracking for this API. Default is true, you need to explicitly set it to false",
      "type": "boolean"
    },
    "domain": {
      "description": "Domain represents a custom host header that the gateway will listen on for this API",
      "type": "string"
    },
    "enable_context_vars": {
      "description": "EnableContextVars extracts request context variables from the start of the middleware chain. Set this to true to make them available to your transforms. Context Variables are available in the url rewriter, modify headers and body transforms.",
      "type": "boolean"
    },
    "enable_coprocess_auth": {
      "type": "boolean"
    },
    "enable_detailed_recording": {
      "description": "EnableDetailedRecording instructs Tyk store the inbound request and outbound response data in HTTP Wire format as part of the Analytics data",
      "type": "boolean"
    },
    "enable_ip_blacklisting": {
      "description": "EnableIPBlacklisting activates the ip blacklisting middleware.",
      "type": "boolean"
    },
    "enable_ip_whitelisting": {
      "description": "EnableIPWhiteListing activates the ip whitelisting middleware.",
      "type": "boolean"
    },
    "graphql": {
      "description": "GraphQLConfig is the root config object for a GraphQL API.",
      "type": "object",
      "required": [
        "enabled",
        "execution_mode",
        "schema"
      ],
      "properties": {
        "enabled": {
          "description": "Enabled indicates if GraphQL proxy should be enabled.",
          "type": "boolean"
        },
        "execution_mode": {
          "description": "ExecutionMode is the mode to define how an api behaves.",
          "type": "string",
          "enum": [
            "proxyOnly",
            "executionEngine"
          ]
        },
        "playground": {
          "description": "GraphQLPlayground is the Playground specific configuration.",
          "type": "object",
          "required": [
            "enabled",
            "path"
          ],
          "properties": {
            "enabled": {
              "description": "Enabled indicates if the playground should be enabled.",
              "type": "boolean"
            },
            "path": {
              "description": "Path sets the path on which the playground will be hosted if enabled.",
              "type": "string"
            }
          }
        },
        "schema": {
          "description": "Schema is the GraphQL Schema exposed by the GraphQL API/Upstream/Engine.",
          "type": "string"
        },
        "type_field_configurations": {
          "description": "TypeFieldConfigurations is a rule set of data source and mapping of a schema field.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "data_source",
              "field_name",
              "mapping",
              "type_name"
            ],
            "properties": {
              "data_source": {
                "type": "object",
                "required": [
                  "kind"
                ],
                "properties": {
                  "data_source_config": {
                    "description": "Config is the DataSource specific configuration object Each Planner needs to make sure to parse their Config Object correctly",
                    "type": "object",
                    "required": [
                      "method",
                      "url"
                    ],
                    "properties": {
                      "body": {
                        "type": "string"
                      },
                      "default_type_name": {
                        "type": "string"
                      },
                      "headers": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "method": {
                        "description": "Method represents HTTP request method",
                        "type": "string",
                        "enum": [
                          "GET",
                          "POST",
                          "PUT",
                          "PATCH",
                          "DELETE",
                          "OPTIONS",
                          "HEAD",
                          "CONNECT",
                          "TRACE"
                        ]
                      },
                      "status_code_type_name_mappings": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "status_code"
                          ],
                          "properties": {
                            "status_code": {
                              "type": "integer"
                            },
                            "type_name": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "url": {
                        "type": "string"
                      }
                    }
                  },
                  "kind": {
                    "description": "Kind defines the unique identifier of the DataSource Kind needs to match to the Planner \"DataSourceName\" name",
                    "type": "string",
                    "enum": [
                      "GraphQLDataSource",
                      "HTTPJSONDataSource"
                    ]
                  }
                }
              },
              "field_name": {
                "type": "string"
              },
              "mapping": {
                "type": "object",
                "required": [
                  "disabled",
                  "path"
                ],
                "properties": {
                  "disabled": {
                    "type": "boolean"
                  },
                  "path": {
                    "type": "string"
                  }
                }
              },
              "type_name": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "id": {
      "description": "For server use only, do not use",
      "type": "string"
    },
    "listen_port": {
      "type": "integer"
    },
    "name": {
      "type": "string"
    },
    "org_id": {
      "description": "OrgID is overwritten - no point setting this",
      "type": "string"
    },
    "protocol": {
      "type": "string",
      "enum": [
        "http",
        "https",
        "tcp",
        "tls"
      ]
    },
    "proxy": {
      "description": "Proxy",
      "type": "object",
      "required": [
        "target_url"
      ],
      "properties": {
        "check_host_against_uptime_tests": {
          "description": "CheckHostAgainstUptimeTests will check the hostname of the outbound request against the downtime list generated by the uptime test host checker. If the host is found, then it is skipped or removed from the load balancer. This is only valid if uptime tests for the api are enabled.",
          "type": "boolean"
        },
        "disable_strip_slash": {
          "description": "DisableStripSlash disables the stripping of the slash suffix from a URL. when `true` a request to http://foo.bar/baz/ will be retained. when `false` a request to http://foo.bar/baz/ will be matched to http://foo.bar/baz",
          "type": "boolean"
        },
        "enable_load_balancing": {
          "description": "EnableLoadBalancing enables Tyk's round-robin loadbalancer. Tyk will ignore the TargetURL field, and rely on the hosts in the Targets list",
          "type": "boolean"
        },
        "listen_path": {
          "description": "ListenPath represents the path to listen on. e.g. `/api` or `/` or `/httpbin`. Any requests coming into the host, on the port that Tyk is configured to run on, that match this path will have the rules defined in the API Definition applied. Versioning assumes that different versions of an API will live on the same URL structure. If you are using URL-based versioning (e.g. /v1/function, /v2/function) then it is recommended to set up a separate non-versioned definition for each version as they are essentially separate APIs.",
          "type": "string"
        },
        "preserve_host_header": {
          "description": "If PreserveHostHeader is set to true then the host header in the outbound request is retained to be the inbound hostname of the proxy.",
          "type": "boolean"
        },
        "service_discovery": {
          "description": "TODO: Untested. Is there a use-case for SD inside a K8s environment?",
          "type": "object",
          "required": [
            "cache_timeout",
            "data_path",
            "endpoint_returns_list",
            "parent_data_path",
            "port_data_path",
            "query_endpoint",
            "target_path",
            "use_discovery_service",
            "use_nested_query",
            "use_target_list"
          ],
          "properties": {
            "cache_timeout": {
              "type": "integer",
              "format": "int64"
            },
            "data_path": {
              "type": "string"
            },
            "endpoint_returns_list": {
              "type": "boolean"
            },
            "parent_data_path": {
              "type": "string"
            },
            "port_data_path": {
              "type": "string"
            },
            "query_endpoint": {
              "type": "string"
            },
            "target_path": {
              "type": "string"
            },
            "use_discovery_service": {
              "type": "boolean"
            },
            "use_nested_query": {
              "type": "boolean"
            },
            "use_target_list": {
              "type": "boolean"
            }
          }
        },
        "strip_listen_path": {
          "description": "StripListenPath removes the inbound listen path in the outgoing request. e.g. http://acme.com/httpbin/get where `httpbin` is the listen path. The `httpbin` listen path which is used to identify the API loaded in Tyk is removed, and the outbound request would be http://httpbin.org/get",
          "type": "boolean"
        },
        "target_list": {
          "description": "Targets defines a list of upstream host targets. Tyk will then round-robin load balance between these targets. EnableLoadBalancing must be set to true in order to take advantage of this feature.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "target_url": {
          "description": "TargetURL defines the target URL that the request should be proxied to.",
          "type": "string"
        },
        "transport": {
          "description": "Transport section exposes advanced transport level configurations such as minimum TLS version.",
          "type": "object",
          "properties": {
            "proxy_url": {
              "description": "ProxyURL specifies custom forward proxy \u0026 port. e.g. `http(s)://proxy.url:1234`",
              "type": "string"
            },
            "ssl_ciphers": {
              "description": "SSLCipherSuites is an array of acceptable cipher suites. A list of allowed cipher suites can be found in the Go Crypto TLS package constants documentation https://golang.org/pkg/crypto/tls/#pkg-constants",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ssl_force_common_name_check": {
              "description": "SSLForceCommonNameCheck forces hostname validation against the certificate Common Name",
              "type": "boolean"
            },
            "ssl_insecure_skip_verify": {
              "description": "SSLInsecureSkipVerify controls whether it is possible to use self-signed certificates when connecting to the upstream. This is applied to `TykMakeHttpRequest` \u0026 `TykMakeBatchRequest` in virtual endpoint middleware.",
              "type": "boolean"
            },
            "ssl_min_version": {
              "description": "SSLMinVersion defines the minimum TLS version the gateway will use to establish a connection to the upstream. 1.0: 769; 1.1: 770; 1.2: 771; 1.3: 772.",
              "type": "integer",
              "enum": [
                769,
                770,
                771,
                772
              ]
            }
          }
        }
      }
    },
    "response_processors": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      }
    },
    "strip_auth_data": {
      "description": "StripAuthData ensures that any security tokens used for accessing APIs are stripped and not leaked to the upstream",
      "type": "boolean"
    },
    "tags": {
      "description": "Tags are named gateway nodes which tell gateway clusters whether to load an API or not. for example, to load the API in an ARA gateway, you might want to include an `edge` tag.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "use_keyless": {
      "description": "UseKeylessAccess will switch off all key checking. Some analytics will still be recorded, but rate-limiting, quotas and security policies will not be possible (there is no session to attach requests to).",
      "type": "boolean"
    },
    "use_standard_auth": {
      "description": "UseStandardAuth enables simple bearer token authentication",
      "type": "boolean"
    },
    "version_data": {
      "type": "object",
      "required": [
        "default_version",
        "not_versioned"
      ],
      "properties": {
        "default_version": {
          "type": "string"
        },
        "not_versioned": {
          "type": "boolean"
        },
        "versions": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "expires": {
                "type": "string"
              },
              "extended_paths": {
                "type": "object",
                "properties": {
                  "advance_cache_config": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "cache_key_regex",
                        "cache_response_codes",
                        "method",
                        "path"
                      ],
                      "properties": {
                        "cache_key_regex": {
                          "type": "string"
                        },
                        "cache_response_codes": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "black_list": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "ignore_case",
                        "method_actions",
                        "path"
                      ],
                      "properties": {
                        "ignore_case": {
                          "type": "boolean"
                        },
                        "method_actions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "required": [
                              "action",
                              "code",
                              "data",
                              "headers"
                            ],
                            "properties": {
                              "action": {
                                "type": "string"
                              },
                              "code": {
                                "type": "integer"
                              },
                              "data": {
                                "type": "string"
                              },
                              "headers": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "cache": {
                    "description": "List of paths which cache middleware should be enabled on",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "circuit_breakers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "method",
                        "path",
                        "return_to_service_after",
                        "samples",
                        "threshold_percent"
                      ],
                      "properties": {
                        "disable_half_open_state": {
                          "type": "boolean"
                        },
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        },
                        "return_to_service_after": {
                          "description": "ReturnToServiceAfter represents the time in seconds to return back to the service",
                          "type": "integer"
                        },
                        "samples": {
                          "description": "Samples defines the number of requests to base the ThresholdPercent on",
                          "type": "integer",
                          "format": "int64"
                        },
                        "threshold_percent": {
                          "description": "ThresholdPercent is the percentage of requests that fail before breaker is tripped",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "do_not_track_endpoints": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "method",
                        "path"
                      ],
                      "properties": {
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "hard_timeouts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "method",
                        "path",
                        "timeout"
                      ],
                      "properties": {
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        },
                        "timeout": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "ignored": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "ignore_case",
                        "method_actions",
                        "path"
                      ],
                      "properties": {
                        "ignore_case": {
                          "type": "boolean"
                        },
                        "method_actions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "required": [
                              "action",
                              "code",
                              "data",
                              "headers"
                            ],
                            "properties": {
                              "action": {
                                "type": "string"
                              },
                              "code": {
                                "type": "integer"
                              },
                              "data": {
                                "type": "string"
                              },
                              "headers": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "internal": {
                    "description": "ValidateJSON            []ValidatePathMeta    `json:\"validate_json,omitempty\"` //  Breaking integration test?",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "method",
                        "path"
                      ],
                      "properties": {
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "method_transforms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "method",
                        "path",
                        "to_method"
                      ],
                      "properties": {
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        },
                        "to_method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        }
                      }
                    }
                  },
                  "size_limits": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "method",
                        "path",
                        "size_limit"
                      ],
                      "properties": {
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        },
                        "size_limit": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  "track_endpoints": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "method",
                        "path"
                      ],
                      "properties": {
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "transform": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "method",
                        "path",
                        "template_data"
                      ],
                      "properties": {
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        },
                        "template_data": {
                          "type": "object",
                          "required": [
                            "enable_session",
                            "input_type",
                            "template_mode",
                            "template_source"
                          ],
                          "properties": {
                            "enable_session": {
                              "type": "boolean"
                            },
                            "input_type": {
                              "type": "string"
                            },
                            "template_mode": {
                              "type": "string"
                            },
                            "template_source": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "transform_headers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "act_on",
                        "add_headers",
                        "delete_headers",
                        "method",
                        "path"
                      ],
                      "properties": {
                        "act_on": {
                          "type": "boolean"
                        },
                        "add_headers": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "delete_headers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "transform_jq": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "filter",
                        "method",
                        "path"
                      ],
                      "properties": {
                        "filter": {
                          "type": "string"
                        },
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "transform_jq_response": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "filter",
                        "method",
                        "path"
                      ],
                      "properties": {
                        "filter": {
                          "type": "string"
                        },
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "transform_response": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "method",
                        "path",
                        "template_data"
                      ],
                      "properties": {
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        },
                        "template_data": {
                          "type": "object",
                          "required": [
                            "enable_session",
                            "input_type",
                            "template_mode",
                            "template_source"
                          ],
                          "properties": {
                            "enable_session": {
                              "type": "boolean"
                            },
                            "input_type": {
                              "type": "string"
                            },
                            "template_mode": {
                              "type": "string"
                            },
                            "template_source": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "transform_response_headers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "act_on",
                        "add_headers",
                        "delete_headers",
                        "method",
                        "path"
                      ],
                      "properties": {
                        "act_on": {
                          "type": "boolean"
                        },
                        "add_headers": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "delete_headers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "url_rewrites": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "match_pattern",
                        "method",
                        "path",
                        "rewrite_to",
                        "triggers"
                      ],
                      "properties": {
                        "match_pattern": {
                          "description": "MatchPattern is a regular expression pattern to match the path",
                          "type": "string"
                        },
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "description": "Path represents the endpoint listen path",
                          "type": "string"
                        },
                        "rewrite_to": {
                          "description": "RewriteTo is the target path on the upstream, or target URL we wish to rewrite to",
                          "type": "string"
                        },
                        "triggers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "on",
                              "options",
                              "rewrite_to"
                            ],
                            "properties": {
                              "on": {
                                "type": "string"
                              },
                              "options": {
                                "type": "object",
                                "required": [
                                  "header_matches",
                                  "path_part_matches",
                                  "payload_matches",
                                  "query_val_matches",
                                  "request_context_matches",
                                  "session_meta_matches"
                                ],
                                "properties": {
                                  "header_matches": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "required": [
                                        "match_rx",
                                        "reverse"
                                      ],
                                      "properties": {
                                        "match_rx": {
                                          "type": "string"
                                        },
                                        "reverse": {
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  },
                                  "path_part_matches": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "required": [
                                        "match_rx",
                                        "reverse"
                                      ],
                                      "properties": {
                                        "match_rx": {
                                          "type": "string"
                                        },
                                        "reverse": {
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  },
                                  "payload_matches": {
                                    "type": "object",
                                    "required": [
                                      "match_rx",
                                      "reverse"
                                    ],
                                    "properties": {
                                      "match_rx": {
                                        "type": "string"
                                      },
                                      "reverse": {
                                        "type": "boolean"
                                      }
                                    }
                                  },
                                  "query_val_matches": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "required": [
                                        "match_rx",
                                        "reverse"
                                      ],
                                      "properties": {
                                        "match_rx": {
                                          "type": "string"
                                        },
                                        "reverse": {
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  },
                                  "request_context_matches": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "required": [
                                        "match_rx",
                                        "reverse"
                                      ],
                                      "properties": {
                                        "match_rx": {
                                          "type": "string"
                                        },
                                        "reverse": {
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  },
                                  "session_meta_matches": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "required": [
                                        "match_rx",
                                        "reverse"
                                      ],
                                      "properties": {
                                        "match_rx": {
                                          "type": "string"
                                        },
                                        "reverse": {
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "rewrite_to": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "virtual": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "function_source_type",
                        "function_source_uri",
                        "method",
                        "path",
                        "proxy_on_error",
                        "response_function_name",
                        "use_session"
                      ],
                      "properties": {
                        "function_source_type": {
                          "type": "string"
                        },
                        "function_source_uri": {
                          "type": "string"
                        },
                        "method": {
                          "description": "Method represents HTTP request method",
                          "type": "string",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "HEAD",
                            "CONNECT",
                            "TRACE"
                          ]
                        },
                        "path": {
                          "type": "string"
                        },
                        "proxy_on_error": {
                          "type": "boolean"
                        },
                        "response_function_name": {
                          "type": "string"
                        },
                        "use_session": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "white_list": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "ignore_case",
                        "method_actions",
                        "path"
                      ],
                      "properties": {
                        "ignore_case": {
                          "type": "boolean"
                        },
                        "method_actions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "required": [
                              "action",
                              "code",
                              "data",
                              "headers"
                            ],
                            "properties": {
                              "action": {
                                "type": "string"
                              },
                              "code": {
                                "type": "integer"
                              },
                              "data": {
                                "type": "string"
                              },
                              "headers": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "global_headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "global_headers_remove": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "global_response_headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "global_response_headers_remove": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "global_size_limit": {
                "type": "integer",
                "format": "int64"
              },
              "ignore_endpoint_case": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              },
              "override_target": {
                "type": "string"
              },
              "paths": {
                "type": "object",
                "required": [
                  "black_list",
                  "ignored",
                  "white_list"
                ],
                "properties": {
                  "black_list": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ignored": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "white_list": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "use_extended_paths": {
                "type": "boolean"
              }
            }
          }
        }
      }
    }
  }
}
